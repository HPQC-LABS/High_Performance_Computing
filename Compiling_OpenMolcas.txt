On Cedar, 2022 November 23 version of HPQC/Add_Basis_Sets: make -j6 started at 6:17am finished at 6:29am
On Cedar, 2022 November 23 version of HPQC/Add_Basis_Sets: cmake from a folder where O'Molcas was already built, started at 6:34am finished at 6:37am (just chnaged the names of two basis_library files)
On Cedar, 2022 November 23 version of HPQC/Add_Basis_Sets: make -j6 from a folder where O'Molcas was already built, started at 6:37 finished at 6:39am (just chnaged the names of two basis_library files)

On Cedar, 2022 December 5 version of HPQC/master: cmake -j ../OpenMolcas_HPQC took only from 12:11-12:13pm, when running cmake for the *first* time (which I'd think would be slower than when I ran it on 23 November). I had forgotten to load HDF5 though. 
On Cedar, 2022 December 5 version of HPQC/master: cmake -j ../OpenMolcas_HPQC after loading HDF5: real	1m29.423s, user	0m5.035s, sys	0m7.625s
On Cedar, 2022 December 5 version of HPQC/master: cmake ../OpenMolcas_HPQC after loading HDF5: real	1m3.883s, user	0m4.754s, sys	0m8.022s
On Cedar, 2022 December 5 version of HPQC/master: cmake ../OpenMolcas_HPQC after loading HDF5: real	1m0.627s, user	0m4.774s, sys	0m9.020s
On Cedar, 2022 December 5 version of HPQC/master: make -j6 from scratch and after loading HDF5 (make -j crashes): real	9m44.577s, user	15m15.985s, sys	12m20.209s
------------------------------------------------------------------
CONCLUSION: "cmake -j" is not noticably better than "cmake".

On Cedar1, 2022 December 8 Version of HPQC/LEVEL: make -j8 from scratch after loading HDF5: real	12m22.927s, user	15m11.978s, sys	15m4.729s
On Cedar1, 2022 December 22 Version of HPQC/LEVEL: make -j in already compiled folder after loading HDF5 and python, but after signing back in after a power shut-down: real 4m2.268s user 0m58.857s sys 0m50.165s 
On Cedar1, 2022 December 28 Version of HPQC: make -j12 in already compiled folder but after a lot of changes were made (HPQC/LEVEL branch was merged into HPQC fork), after loading HDF5 and python: real	2m41.049s, user	0m56.186s, sys	0m43.772s

On Graham1, 2022 December 28 Version of HPQC: make -j12 from scratch wtih hdf5 and python loaded, and using GCC instead of Intel: took only about 4 minutes !!! (don't know exact amount because it ended with an error at real 3m46.388s, user	9m21.013s, sys	7m29.270s, then I restarted it, but the restart didn't take long at all)
On Graham2, 2022 December 30 Version of HPQC: cmake from scratch with python and hdf5 laoded: real	3m15.161s, user	0m3.118s, sys	0m5.017s
On Graham2, 2022 December 30 Version of HPQC: make -j16 from scratch with python and hdf5 laoded: (errors came at the very end due to running out of disk space in /home directory which only had 53G available, but we'd already finished 4 lines starting with [100%].. not much more time is required after that) real	6m9.004s, user	13m37.276s, sys	10m14.497s

On Cedar1 2022 December 30 Version of HPQC: cmake from scratch with python and hdf5 loaded: real	0m28.378s, user	0m5.178s, sys	0m8.920s
On Cedar1 2022 December 30 Version of HPQC: make -j12 from scratch with python and hdf5 loaded: forgot to time it but it was FAST and successful!
On Cedar1 0f529f99 of HPQC (but done on 2/1/23): cmake from scratch with python loaded but hdf5 UNLOADED: real	0m21.768s, user	0m4.894s, sys	0m7.792s
On Cedar1 0f529f99 of HPQC (but done on 2/1/23): make -j16 from scratch with python loaded but hdf5 UNLOADED: real	2m11.886s, user	14m9.632s, sys	3m43.564s (WOW THAT WAS FAST! THANKS TO NO HDF5!)
 

On Alavi, 2022 December 28 Version of HPQC: make -j2 from scratch without hdf5 or python loaded (since it's a laptop without lmod) and using GCC (GNU 5.4.0) took this long: real	19m50.350s, user	11m6.961s, sys	1m24.856s but took FOREVER just before the HEAD command here: 
============
[  3%] Building Fortran object unit_tests/linalg_mod/bin/CMakeFiles/fruit_molcas.dir/fruit.f90.o
[  3%] Linking Fortran static library ../../../lib/libfruit_molcas.a
[  3%] Built target fruit_molcas
HEAD is now at 9bf3b64... Remaple hyb_gga_x_cam_s12
[  3%] Performing update step for 'Libxc'
============
and during that time "top" suggested that nothing was compiling, so it was very furstrating but fortunately I waited it out and didn't terminate the compilation with CTRL+C.  

On Alavi, 2022 December 31 Version of Deyan: time cmake  ../OpenMolcas_Deyan -D BIGOT=ON (from scratch, no HDF5): real	0m9.270s, user	0m3.623s, sys	0m0.819s
!WARNING! On Alavi, 2022 December 31 Version of Deyan: time make -j (from scratch, no hdf5): [ 64%] Built target fmm_util_obj Makefile:145: recipe for target 'all' failed make: *** [all] Error 2 real	119m37.677s, user	9m24.948s, sys	319m1.586s. [computer froze fan went loud (luckily only for a few minutes), and lots of data from RAM went to disk.. took about 2 hours for the computer to become usable again]

On Alavi (NAG image: registry.gitlab.com/molcas/dockerfiles/nag, however by default it still used GCC), 2023 January 10 Version of HPQC: make -j2 from scratch without hdf5 or python laoded: real	19m25.374s, user	15m52.934s, sys	1m51.996s

On Cedar1 2023 January 10 Version of HPQC: after using cmake ../OpenMolcas_HPQC_2022_12_30 -D CMAKE_Fortran_COMPILER=/cvmfs/restricted.computecanada.ca/easybuild/software/2020/Core/intel/2020.1.217/compilers_and_libraries_2020.1.217/linux/bin/intel64/ifort without HDF5 and with python, from scratch: make -j18 took real	11m12.933s, user	27m45.794s, sys	7m11.806s

On lamodel.unifal-mg.edu.br/orange i7-4770 CPU @ 3.40GHz (Haswell 2013), 2023 January 11 Version of HPQC: after using cmake ../OpenMolcas -D BIGOT=ON -D CMAKE_Fortran_COMPILER=/opt/intel/oneapi/compiler/2023.0.0/linux/bin/intel64/ifort without hdf5 I hope: time make -j4 leads to: [ 83%] Built target gugaci_obj make: *** [Makefile:158: all] Error 2, real	39m42,091s, user	13m49,078s, sys	1m48,013s. After fixing the error, it took real	4m59,598s, user	3m16,962s, sys	0m26,274s to finish 100.0%

On Alavi (Intel-phusion image: registry.gitlab.com/molcas/dockerfiles/intel-phusion, using /opt/intel/oneapi/compiler/2021.4.0/linux/bin/intel64/ifort), 2023 January 11 Version of HPQC: make -j2 from scratch without hdf5 or python loaded: real	26m58.355s, user	26m4.155s, sys	3m7.291s)

On Alavi (Intel-phusion image: registry.gitlab.com/molcas/dockerfiles/intel-phusion, using /opt/intel/oneapi/compiler/2021.4.0/linux/bin/intel64/ifort), 2023 January 13 Version of HPQC: make -j from scratch without hdf5 or python loaded: real	49m0.798s user	23m55.496s sys	3m1.829s

On Alavi, 2022 January 14 version of HPQC: Ran "make -j2" after minor change, and it was fast. Ran "cmake" with BIGOT=ON and "make -j2" was slower, but seemed like it would take as long as what the next compilation took (see later in this line), but it failed due to the rdvec problem that's unrelated to LEVEL, so I re-ran "cmake" with BIGOT=OFF then "make -j2" took: real	4m19.909s, user	7m36.317s, sys	0m54.000s


GitLab runners:
============
build:garble: ~20 minutes https://gitlab.com/hpqc-labs/OpenMolcas/-/jobs/3549215083
build:linalg: ~19 minutes https://gitlab.com/hpqc-labs/OpenMolcas/-/jobs/3549215078
build:bound:  ~82 minutes https://gitlab.com/hpqc-labs/OpenMolcas/-/jobs/3550933293
